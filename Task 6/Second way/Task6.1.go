//Способ 2: Использование контекста

package main

import (
	"context"
	"fmt"
	"time"
)

func main() {
	//Создаем контекст и функцию для отмены контекста
	ctx, cancel := context.WithCancel(context.Background())

	//Запускаем горутину
	go func() {
		for {
			select {
			//Если получен сигнал о завершении контекста
			case <-ctx.Done():
				fmt.Println("Горутина завершена.")
				return
			//Если нет сигнала о завершении контекста, продолжаем работу
			default:
				fmt.Println("Горутина работает...")
				time.Sleep(time.Second)
			}
		}
	}()

	//Главная горутина ждет 3 секунды
	time.Sleep(3 * time.Second)
	fmt.Println("Главная горутина отправляет сигнал завершения в другую горутину.")
	//Отменяем контекст, что приводит к завершению горутины, выполняющейся в фоне
	cancel()

	//Даем время для завершения другой горутины (ждем 2 секунды)
	time.Sleep(2 * time.Second)
	//Выводим сообщение о завершении программы
	fmt.Println("Программа завершена.")
}
